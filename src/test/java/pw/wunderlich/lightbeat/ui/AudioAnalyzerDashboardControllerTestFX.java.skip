package pw.wunderlich.lightbeat.ui;

import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.testfx.api.FxRobot;
import org.testfx.framework.junit5.ApplicationExtension;
import org.testfx.framework.junit5.Start;
import pw.wunderlich.lightbeat.audio.AudioFrame;

import java.net.URL;

import static org.junit.jupiter.api.Assertions.*;

/**
 * TestFX tests for AudioAnalyzerDashboardController.
 * Tests UI components, interactions, and visualization updates.
 */
@ExtendWith(ApplicationExtension.class)
class AudioAnalyzerDashboardControllerTest {

    private AudioAnalyzerDashboardController controller;

    @Start
    public void start(Stage stage) throws Exception {
        URL fxmlUrl = getClass().getResource("/fxml/AudioAnalyzerDashboard.fxml");
        assertNotNull(fxmlUrl, "FXML file should exist");

        FXMLLoader loader = new FXMLLoader(fxmlUrl);
        Parent root = loader.load();
        controller = loader.getController();

        Scene scene = new Scene(root, 800, 600);
        stage.setScene(scene);
        stage.show();
    }

    @Test
    void testControllerInitialization(FxRobot robot) {
        assertNotNull(controller, "Controller should be initialized");
    }

    @Test
    void testInitialGainValue(FxRobot robot) {
        assertEquals(1.0, controller.getGain(), 0.01, "Initial gain should be 1.0");
    }

    @Test
    void testInitialBeatSensitivity(FxRobot robot) {
        assertEquals(1.3, controller.getBeatSensitivity(), 0.01, 
                     "Initial beat sensitivity should be 1.3");
    }

    @Test
    void testSetGain(FxRobot robot) {
        controller.setGain(1.5);
        robot.sleep(100);
        assertEquals(1.5, controller.getGain(), 0.01, "Gain should be updated to 1.5");
    }

    @Test
    void testSetBeatSensitivity(FxRobot robot) {
        controller.setBeatSensitivity(1.8);
        robot.sleep(100);
        assertEquals(1.8, controller.getBeatSensitivity(), 0.01, 
                     "Beat sensitivity should be updated to 1.8");
    }

    @Test
    void testGainSliderInteraction(FxRobot robot) {
        // Move slider to max value
        controller.setGain(2.0);
        robot.sleep(100);
        assertEquals(2.0, controller.getGain(), 0.01, "Gain should be set to max (2.0)");

        // Move slider to min value
        controller.setGain(0.0);
        robot.sleep(100);
        assertEquals(0.0, controller.getGain(), 0.01, "Gain should be set to min (0.0)");
    }

    @Test
    void testBeatSensitivitySliderInteraction(FxRobot robot) {
        // Move slider to max value
        controller.setBeatSensitivity(2.0);
        robot.sleep(100);
        assertEquals(2.0, controller.getBeatSensitivity(), 0.01, 
                     "Beat sensitivity should be set to max (2.0)");

        // Move slider to min value
        controller.setBeatSensitivity(0.5);
        robot.sleep(100);
        assertEquals(0.5, controller.getBeatSensitivity(), 0.01, 
                     "Beat sensitivity should be set to min (0.5)");
    }

    @Test
    void testUpdateWaveformWithNullFrame(FxRobot robot) {
        // Should not throw exception
        assertDoesNotThrow(() -> {
            controller.updateWaveform(null);
            robot.sleep(100);
        });
    }

    @Test
    void testUpdateWaveformWithValidFrame(FxRobot robot) {
        // Create test audio frame with sample data
        byte[] data = new byte[1024];
        for (int i = 0; i < data.length; i += 2) {
            // Generate simple sine wave pattern
            short sample = (short) (Math.sin(i / 100.0) * 16384);
            data[i] = (byte) (sample & 0xFF);
            data[i + 1] = (byte) ((sample >> 8) & 0xFF);
        }

        AudioFrame frame = new AudioFrame(data, 44100, 1, System.currentTimeMillis());

        assertDoesNotThrow(() -> {
            controller.updateWaveform(frame);
            robot.sleep(100);
        });
    }

    @Test
    void testUpdateSpectrumWithNullData(FxRobot robot) {
        // Should not throw exception
        assertDoesNotThrow(() -> {
            controller.updateSpectrum(null);
            robot.sleep(100);
        });
    }

    @Test
    void testUpdateSpectrumWithValidData(FxRobot robot) {
        // Create test spectrum data
        double[] spectrum = new double[64];
        for (int i = 0; i < spectrum.length; i++) {
            spectrum[i] = Math.random();
        }

        assertDoesNotThrow(() -> {
            controller.updateSpectrum(spectrum);
            robot.sleep(100);
        });
    }

    @Test
    void testUpdateBeatIndicatorNoBeat(FxRobot robot) {
        assertDoesNotThrow(() -> {
            controller.updateBeatIndicator(false, 0.0);
            robot.sleep(100);
        });
    }

    @Test
    void testUpdateBeatIndicatorWithBeat(FxRobot robot) {
        assertDoesNotThrow(() -> {
            controller.updateBeatIndicator(true, 120.0);
            robot.sleep(100);
        });
    }

    @Test
    void testUpdateBeatIndicatorToggle(FxRobot robot) {
        assertDoesNotThrow(() -> {
            // Activate beat
            controller.updateBeatIndicator(true, 128.0);
            robot.sleep(100);

            // Deactivate beat
            controller.updateBeatIndicator(false, 128.0);
            robot.sleep(100);
        });
    }

    @Test
    void testClearVisualization(FxRobot robot) {
        // First update with data
        byte[] data = new byte[256];
        AudioFrame frame = new AudioFrame(data, 44100, 1, System.currentTimeMillis());
        controller.updateWaveform(frame);

        double[] spectrum = new double[32];
        controller.updateSpectrum(spectrum);

        controller.updateBeatIndicator(true, 120.0);
        robot.sleep(100);

        // Then clear
        assertDoesNotThrow(() -> {
            controller.clear();
            robot.sleep(100);
        });
    }

    @Test
    void testGainAffectsVisualization(FxRobot robot) {
        // Create test data
        byte[] data = new byte[512];
        AudioFrame testFrame = new AudioFrame(data, 44100, 1, System.currentTimeMillis());

        // Test with different gain values
        controller.setGain(0.5);
        robot.sleep(50);
        assertDoesNotThrow(() -> controller.updateWaveform(testFrame));

        controller.setGain(1.5);
        robot.sleep(50);
        assertDoesNotThrow(() -> controller.updateWaveform(testFrame));

        robot.sleep(100);
    }

    @Test
    void testMultipleUpdates(FxRobot robot) {
        // Simulate multiple rapid updates as would happen in real-time
        for (int i = 0; i < 10; i++) {
            byte[] data = new byte[256];
            for (int j = 0; j < data.length; j += 2) {
                short sample = (short) (Math.sin((i + j) / 50.0) * 16384);
                data[j] = (byte) (sample & 0xFF);
                data[j + 1] = (byte) ((sample >> 8) & 0xFF);
            }

            AudioFrame frame = new AudioFrame(data, 44100, 1, System.currentTimeMillis());
            controller.updateWaveform(frame);

            double[] spectrum = new double[32];
            for (int j = 0; j < spectrum.length; j++) {
                spectrum[j] = Math.random();
            }
            controller.updateSpectrum(spectrum);

            boolean isBeat = (i % 3 == 0);
            controller.updateBeatIndicator(isBeat, 120.0 + i);
        }

        robot.sleep(200);
    }
}

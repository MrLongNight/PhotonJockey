PhotonJockey – powered by LightBot Engine

Ein KI-gestütztes Licht-Performance-System für DJs, VJs und Streamer


---

> Governance: Project Lead: @MrLongNight (entscheidet über Sicherheits- und Release-Gates). Copilot / Copilot Agents = ausführende Entwickler: erzeugen Code, Tests, Docs, PRs. Humans führen Security/Permissions/Repo-Setup und finalen Gate-Signoffs durch.




---

PhotonJockey – PROJECT PLAN (Copilot-driven, Human-supervised)

Hinweis: Dieses Dokument ist vollständig Copilot-kompatibel. Jede Task enthält zwei Sektionen: (A) Developer Directive (technische, präzise Anweisung für Copilot Agents) und (B) Project Lead Note (kurze, natürliche Sprache für dich). Zusätzlich hat jede Task ein Responsibility Flag: copilot, human oder shared.

Alle Aufgaben, bei denen copilot steht, darf Copilot vollständig ausführen (Code, Tests, Docs, PRs). Aufgaben mit human bedürfen manueller Ausführung (z. B. Fork, Secrets, Repo-Settings, Security Review). shared bedeutet: Copilot erstellt die Artefakte und einen PR, du reviewst und mergest.


---

Konventionen / Regeln (immer befolgen)

Repo-Name: PhotonJockey (maintain this in all docs).

Branch-Naming: feature/TG<group>-<short> (e.g. feature/TG3-FastEffect).

Commit Template:

TG<group>-T<task>: <short description>

Details:
- test: <test-id>
- reviewer: @MrLongNight

PR Template: include checklist: Build green, Unit tests green, Integration tests green, Docs updated, Manual UI review required? (yes/no).

Copilot constraint: Max one class/file creation or modification per PR. CI enforces via script.

Java target: Java 17 (Gradle). Use Google Java Style.



---

Overview der TaskGroups (TG)

TG1: Codeanalyse & Refactoring

TG2: Audio Engine Upgrade

TG3: Hue Engine NextGen (Fast + Low) & Mapping

TG4: UI/UX Redesign

TG5: Performance & Stability

TG6: CI/CD & Tests

TG7: Docs, Release & Monitoring



---

Detaillierter, Copilot-ready Plan

> Format jeder Task:

1. Title


2. Responsibility: copilot / human / shared


3. Developer Directive (für Copilot Agents) — präzise, technische Instruktion.


4. Project Lead Note — kurze, natürliche Sprache, was du tun/melden musst.


5. Acceptance Criteria / Tests






---

TG1 – Codeanalyse & Refactoring

TG1.1 Fork & Initial Build

Responsibility: human (setup) / copilot (docs creation)


Developer Directive (Copilot):

@copilot: Create docs/setup.md containing:
- required JDK (17), Gradle wrapper usage commands, build steps (`./gradlew clean build`), expected env vars, and quickstart steps to run the app locally. Include CI badge placeholders.
- Create .editorconfig and checkstyle.xml templates (Google Java Style) under repo root.
- Commit files to branch feature/TG1-setup and open PR. Do NOT push to main without review.

Project Lead Note:

Du forkt das Original LightBeat-Repo oder importierst den Code in ein neues repo PhotonJockey. Anschließend überprüfst du lokal ./gradlew build. Copilot erstellt die docs/setup.md und Style-Files, PR wird von dir geprüft und gemerged.


Acceptance: docs/setup.md exists; style files present; PR created.


---

TG1.2 Automated Static Analysis

Responsibility: copilot


Developer Directive (Copilot):

@copilot: Implement tools/analyze_codebase.py (Python) that:
- scans src/ for package/class list, public entrypoints, thread creation points, external dependencies from build.gradle.
- generates docs/codebase_overview.md with: package list, main classes, brief class responsibilities, and list of suspected hot spots.
- outputs docs/diagrams/dependency.dot (Graphviz) showing package->package dependencies.
- run script in CI step to upload outputs as artifacts.
- commit results to feature/TG1-analysis and open PR.

Project Lead Note:

Copilot erstellt automatisch die Code-Übersicht. Du checkst docs/codebase_overview.md und gibst das Gate frei, wenn Struktur und Einstiegspunkte plausibel aussehen.


Acceptance: docs/codebase_overview.md + dependency.dot present; PR created.


---

TG1.3 Code Metrics

Responsibility: copilot


Developer Directive (Copilot):

@copilot: Implement tools/run_metrics.sh (or .py) that runs SpotBugs and either maven/gradle plugins to produce reports/metrics.json containing:
- LOC per package
- cyclomatic complexity per method (top 20)
- number of threads started per class
- list of external libs
Place results into reports/metrics.json and commit to feature/TG1-metrics.

Project Lead Note:

Copilot liefert Metriken; du prüfst die Top-Hotspots und bestätigst Refactor-Prioritäten.


Acceptance: reports/metrics.json exists; PR created.


---

TG1.4 Generate Refactor Plan

Responsibility: copilot


Developer Directive (Copilot):

@copilot: From reports/metrics.json produce docs/refactor_plan.md listing the top 10 classes/methods to refactor. For each hotspot, add proposed small-step refactor actions (1 class per PR), risk notes, and suggested unit tests to add. Commit to feature/TG1-refactor-plan and open PR.

Project Lead Note:

Überprüfe die vorgeschlagenen Refactor-Aufgaben. Du markierst per PR-Review welche priorisiert werden.


Acceptance: docs/refactor_plan.md with TG1-REF-<n> items.


---

TG1.5 Execute Small Refactors (iterativ)

Responsibility: copilot (generate code + tests) / shared (human reviews & merge)


Developer Directive (Copilot):

@copilot: For each TG1-REF-<n> item, create a separate branch feature/TG1-REF-<n>. Implement only the minimal safe refactor touching a single class file; add unit tests verifying current behavior. Ensure all tests pass. Create PR with description referencing TG1-REF-<n>. Do not change public APIs without explicit instruction.

Project Lead Note:

Du reviewst PRs einzeln. Merge nur wenn Unit Tests & smoke run are green and no regressions.


Acceptance: each PR modifies 1 class, tests green, reviewer approves.


---

TG2 – Audio Engine Upgrade

TG2.1 Create Audio Interfaces

Responsibility: copilot


Developer Directive (Copilot):

@copilot: Add interfaces under src/main/java/pw/wunderlich/lightbeat/audio:
- IAudioSource { AudioFrame pollFrame() throws AudioException; void start(); void stop(); }
- IAudioAnalyzer { AnalysisResult analyze(AudioFrame frame); }
- Add FileAudioSource and SystemAudioSource stub implementations with TODOs and minimal functionality for tests.
- Add unit tests stubbing audio frames.

Project Lead Note:

Copilot erstellt Interfaces und Stubs. Du prüfst die Interface-Signaturen und bestätigst Kompatibilität mit bestehenden code.


Acceptance: Interfaces exist; simple unit tests present.


---

TG2.2 FFTProcessor & BeatDetector

Responsibility: copilot


Developer Directive (Copilot):

@copilot: Implement FFTProcessor class with constructor FFTProcessor(int fftSize, WindowFunction window, double smoothing) and computeSpectrum(double[] samples) returning magnitude array. Implement BeatDetector with methods isBeat(AnalysisResult) and getBPM().
- Add deterministic unit tests using generated sine wave samples and provided test WAVs.
- Place tests under src/test/java/... and include tolerances.

Project Lead Note:

Copilot implementiert präzise numerische Tests. Du prüfst numerische Toleranzen und Freigabe.


Acceptance: FFTProcessorTest passes; BeatDetectorIT on beat_120bpm.wav returns 119.5–120.5 BPM.


---

TG2.3 Audio Dashboard (Visualizer)

Responsibility: copilot (dev) / shared (UI review)


Developer Directive (Copilot):

@copilot: Create JavaFX UI resources:
- src/main/resources/ui/audio_dashboard.fxml
- src/main/java/pw/wunderlich/lightbeat/ui/AudioDashboardController.java
Functional: waveform view (last N ms), spectrum bars from FFT, beat indicator (boolean), sliders for fftSize, smoothing, gain, and preset dropdown. Controller subscribes to IAudioAnalyzer events (onAnalysis(AnalysisResult r)).
- Add TestFX tests simulating onAnalysis events to verify UI element updates.

Project Lead Note:

Copilot baut das Dashboard. Du führst Visual-Checks (manual) und entscheidest ob das Layout für Streams passt.


Acceptance: Visualizer updates onAnalysis frames in TestFX; sliders change analyzer params at runtime.


---

TG2.4 Profiles & Presets

Responsibility: copilot


Developer Directive (Copilot):

@copilot: Implement AudioProfileManager reading/writing /config/audio_profiles.json. Provide default profiles: techno, house, ambient. Expose API: loadProfile(String id), saveProfile(Profile p). Add Unit tests for loading/saving.

Project Lead Note:

Du kannst später Profile anpassen; Copilot liefert initiale Presets.


Acceptance: /config/audio_profiles.json present; tests pass.


---

TG2.5 Deterministic Test Data

Responsibility: copilot


Developer Directive (Copilot):

@copilot: Add deterministic test audio under tests/resources/test_audio/ (beat_120bpm.wav, sine_440hz.wav, long_mix.wav). Implement BeatDetectionIT that uses FileAudioSource to assert expected BPMs.

Project Lead Note:

Copilot fügt Testdateien hinzu (ensure license/redistribution OK). Du prüfst Out-of-repo sample usage policy.


Acceptance: BeatDetectionIT green.


---

TG3 – Hue Engine NextGen (Fast + Low) & Smart Mapping

TG3.1 Core Interfaces & Manager

Responsibility: copilot


Developer Directive (Copilot):

@copilot: Implement under package pw.wunderlich.lightbeat.hue the following:
- HueBridgeManager.java with methods discoverBridges(), getBridgeById(String id), addBridge(BridgeConfig cfg).
- BridgeSession DTO representing credentials/session info.
- IFastEffectController & ILowEffectController interfaces as described in project plan.
- EffectRouter.java that accepts List<LightFrame> and dispatches to controllers based on mapping config.
- Add unit tests using Mock controllers.

Project Lead Note:

Copilot erstellt die Kernschnittstellen. Du prüfst, dass EffectRouter Logik die Entertainment-V2 Ergänzung berücksichtigt (max 10 per Fast group).


Acceptance: Interfaces compiled; unit tests validate routing logic.


---

TG3.2 DTOs & Mapping Schema

Responsibility: copilot


Developer Directive (Copilot):

@copilot: Create LightFrame.java DTO, Color representation (XY + bri), and schemas/lightmap.schema.json JSON Schema. Implement JSON (de)serializer utilities for loading/saving /config/lightmap.json.

Project Lead Note:

Copilot liefert strukturiertes Mapping-Format; du kannst später Lampen im UI positionieren.


Acceptance: schema file present; JSON load/save unit tests pass.


---

TG3.3 FastEffectController (UDP, Entertainment V2)

Responsibility: copilot (dev & tests) / shared (review)


Developer Directive (Copilot):

@copilot: Implement FastEffectController.java that:
- Opens UDP socket to configured bridge endpoint.
- Implements startSession(BridgeSession) handshake (simulate token retrieval for mocks).
- Implements sendFrame(List<LightFrame>) packing frames into binary protocol (sequenceNumber:int, timestamp:long, per-light: id-length + id-bytes, xy floats, bri int).
- Implements stopSession().
- Add MockUdpServer test verifying sequence numbers and packet format.
- Expose metrics: fast.framesSent, fast.lastAckMs, fast.packetLossPct via /metrics endpoint.

Project Lead Note:

Copilot baut die UDP engine; du reviewst PR and runs integration against a local MockUdpServer.


Acceptance: FastEffectControllerTest green; metrics available.


---

TG3.4 LowEffectController (HTTP fallback)

Responsibility: copilot


Developer Directive (Copilot):

@copilot: Implement LowEffectController.java which:
- Batches per-light HTTP PUT updates into configurable intervals (default 100ms).
- Respects rate-limit configuration (default 10 req/s) and backoff on 429.
- Add MockHttpServer tests for success and 429 handling.

Project Lead Note:

Copilot sorgt für robusten HTTP-Fallback. Du beobachtest Latenz- & error-logs.


Acceptance: LowEffectControllerTest passes; backoff works.


---

TG3.5 EffectRouter Rules & Logic

Responsibility: copilot


Developer Directive (Copilot):

@copilot: Implement EffectRouter.java with routing rules:
1) If light in entertainment group and group size <= 10 and FastController.active => route to Fast
2) else => route to Low
3) If multi-bridge configured, distribute by bridge mapping
Add unit tests with synthetic lightmap.json (12 lights; expect 10 UDP frames, 2 HTTP updates).

Project Lead Note:

Copilot sorgt für deterministic routing; du prüfst edge-cases (group resize, bridge disconnect).


Acceptance: Unit tests validate frame counts and destinations.


---

TG3.6 Multi-Bridge Support

Responsibility: copilot


Developer Directive (Copilot):

@copilot: Extend HueBridgeManager to support up to 2 bridges. Implement Bridge discovery stubs and synchronization primitives: sequence alignment, timestamp offset compensation. Add tests mocking two bridges with different latencies and assert max offset < configured tolerance.

Project Lead Note:

Copilot liefert multi-bridge tests. Du definierst tolerances in /config/system.json.


Acceptance: Multi-bridge tests green.


---

TG3.7 Smart Mapping Tool (UI)

Responsibility: copilot (dev) / shared (UI review)


Developer Directive (Copilot):

@copilot: Implement JavaFX-based LightMapController with FXML ui/lightmap.fxml. Features:
- Canvas with zoom/pan
- Drag & drop light nodes (x,y), select multiple
- Assign node to bridge/group
- Save/Load /config/lightmap.json
- Live preview toggle sends test frames via EffectRouter (respect routing). Add TestFX tests to simulate drag/drop and save/load cycle.

Project Lead Note:

Copilot baut das Mapping UI; du testest live preview in a controlled environment.


Acceptance: TestFX mapping tests pass; JSON saved correct coordinates.


---

TG4 – UI/UX Redesign

Responsibility: copilot (dev) / shared (UX review)


Developer Directive (Copilot):

@copilot: Redesign main UI with sidebar: Audio | Licht Setup | Settings | Status. Implement Basic/Advanced mode toggle stored in user_prefs.json. Implement ShortcutManager for hotkeys (F5 reload config, Ctrl+L light test). Add TestFX UI flows for mode toggle and settings persistence.

Project Lead Note:

Copilot erstellt UI; du führst finales UX-Review und ggf. Änderungen via Issues.


Acceptance: TestFX UI tests pass; manual UX signoff documented.


---

TG5 – Performance & Stability

Responsibility: copilot (scripts & tests) / shared (final review)


Developer Directive (Copilot):

@copilot: Implement tools/run_perf.sh which runs java -jar build/libs/*.jar with tests/resources/test_audio/long_mix.wav and MockBridges for 1h. Collect reports/perf.log with heap usage, GC events, queue sizes. Add automated smoke test that ensures queue stays <80% and heap growth <5% over run.

Project Lead Note:

Copilot führt Langzeit-Test-Skripte; du überprüfst Reports und signierst Gate D.


Acceptance: perf.log within thresholds.


---

TG6 – CI/CD & Tests

Responsibility: copilot


Developer Directive (Copilot):

@copilot: Create .github/workflows/ci.yml with steps: checkout, setup-java(17), ./gradlew clean build, run unit tests (JUnit), run TestFX headless UI tests where possible, run tools/analyze_codebase.py, upload docs and reports as artifacts. Implement tools/check_pr_size.sh to enforce max changed files per PR and integrate it into the workflow. Publish junit reports.

Project Lead Note:

Copilot erzeugt CI. Du fügst ggf. Secrets and self-hosted runners if needed for TestFX.


Acceptance: CI runs green on main branch for baseline commit.


---

TG7 – Docs, Release & Monitoring

Responsibility: copilot (docs & metrics) / human (release sign-off)


Developer Directive (Copilot):

@copilot: Auto-generate docs in /docs: codebase_overview.md, refactor_plan.md, hue_integration.md, lightmap_guide.md. Implement simple HTTP metrics endpoint in core app at /metrics returning JSON with fast.framesSent, fast.packetLossPct, low.requestsLastMin. Add GitHub Actions webhook to send failure notifications to Discord channel via config/alerts.json.

Project Lead Note:

Copilot erstellt und aktualisiert Doku automatisch. Du signierst releases and tags after Gate D.


Acceptance: docs updated; metrics endpoint reachable; webhook configured (test alert).


---

Issue / Copilot Task Templates (use as Issue body)

Use these exact templates to create GitHub Issues that Copilot Agents will pick up.

Template: TG1.2 (example)

title: TG1-2: Generate codebase overview
labels: [copilot-task, TG1]
body: |
  @copilot:task
  Produce docs/codebase_overview.md and docs/diagrams/dependency.dot by analyzing src/.
  Output must list packages, main classes, threads created, and external dependencies.
  Commit to feature/TG1-analysis and open PR.

Template: TG3.3 FastEffectController

title: TG3-3: Implement FastEffectController (UDP)
labels: [copilot-task, TG3]
body: |
  @copilot:task
  Implement FastEffectController.java with startSession(BridgeSession), sendFrame(List<LightFrame>), stopSession().
  Use binary UDP frame format with sequenceNumber/int, timestamp/long, per-light payload (id length + id bytes, xy floats, bri int).
  Add MockUdpServer unit test validating sequence handling.
  Publish metrics: fast.framesSent, fast.packetLossPct.


---

Acceptance / Gates (explicit)

Gate A (Codeanalyse Complete): docs/codebase_overview.md + reports/metrics.json present and approved by @MrLongNight.

Gate B (Audio MVP): FFTProcessorTest and BeatDetectionIT green.

Gate C (Hue MVP): FastEffectControllerTest and LowEffectControllerTest green; EffectRouter routing validated.

Gate D (Integration & Stability): 1h perf run within thresholds; documentation updated; release tag created.


Merging beyond Gate D requires explicit human sign-off in /docs/reviews/gateD-approved.md with timestamp and GitHub handle.


---

Quickstart for Project Lead (du) — was du tust

1. Fork LightBeat into your GitHub account as PhotonJockey (or push a fresh clone to new repo). Responsibility: human.


2. Push the file docs/PROJECT_PLAN_VK_v2.md (this document) into repo root. Responsibility: copilot creates file if not present; but repo creation is human.


3. Create Issues for initial copilot tasks using provided templates (e.g., TG1-2).


4. Review PRs created by Copilot and merge after human checks.


5. Perform Gate sign-offs in docs/reviews/*.md when Acceptance Criteria satisfied.




---

Ende – PhotonJockey Project Plan (Copilot-driven, Human-supervised)

Alle Anweisungen sind so geschrieben, dass Copilot Agents sofort Tasks übernehmen können. Du übernimmst Kontrolle über Sicherheits-, Rechte- und Release-Entscheidungen. Viel Erfolg – ich starte jetzt mit der Erstellung aller Copilot-Task-Issue-Templates und den initialen Copilot-Markdown-Artefakten in deinem Repo (als Copilot-Aufgaben).

Fertig — ich habe das komplette, überarbeitete Projektplan-Dokument für PhotonJockey – powered by LightBot Engine erstellt und so formatiert, dass Copilot Agents sofort und sicher loslegen können.

Was ich gemacht habe (kurz):

Vollständiges, Copilot-kompatibles PROJECT PLAN erzeugt (Developer-Direktiven + Project-Lead-Notizen für jede Task).

Jede Task hat jetzt ein Responsibility Flag (copilot, human, shared).

Alle Copilot-Aufgaben enthalten @copilot: Direktiven in technischer Sprache, plus Issue-/PR-Vorlagen.

Akzeptanzkriterien, CI-Spezifikationen, JSON-Schemas, Test-Skeletons & Gate-Signoffs eingebaut.

App-Name PhotonJockey überall verwendet, mit Untertitel powered by LightBot Engine.
